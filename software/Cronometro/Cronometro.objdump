
Cronometro.elf:     file format elf32-littlenios2
Cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000008f4 memsz 0x000008f4 flags r-x
    LOAD off    0x00002000 vaddr 0x00020000 paddr 0x00000914 align 2**12
         filesz 0x00000004 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000794  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00020000  00000918  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00020000  00000914  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00020004  00000918  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  00000918  00000918  00002004  2**0
                  CONTENTS
  7 .ram_0        00000000  0002012c  0002012c  00002004  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000270  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000019d1  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000e12  00000000  00000000  00003c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00000f1b  00000000  00000000  00004a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000002e8  00000000  00000000  000059a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000a4b  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000066dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  000066f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000008aa  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000e6  00000000  00000000  0000700a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000673  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0000891e  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  00008921  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00008926  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00008927  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00008928  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000892c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00008934  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0000893e  2**0
                  CONTENTS, READONLY
 29 .jdi          000001f6  00000000  00000000  00008977  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000782a6  00000000  00000000  00008b6d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
00020000 l    d  .rwdata	00000000 .rwdata
00020004 l    d  .bss	00000000 .bss
00000918 l    d  .rom_0	00000000 .rom_0
0002012c l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Cronometro.c
000001bc l     F .text	0000009c display_nums
00000258 l     F .text	00000070 display_seconds
000002c8 l     F .text	00000078 begin
00020008 l     O .bss	00000004 mode
00000340 l     F .text	00000174 timer_isr
00020014 l     O .bss	00000004 ms
00020004 l     O .bss	00000004 leds
00020010 l     O .bss	00000004 sec
0002000c l     O .bss	00000004 min
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00020028 g     O .bss	00000004 alt_instruction_exception_handler
00000868 g     F .text	0000002c alt_main
0002002c g     O .bss	00000100 alt_irq
00000914 g       *ABS*	00000000 __flash_rwdata_start
000008e4 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00020020 g     O .bss	00000004 alt_argv
00028000 g       *ABS*	00000000 _gp
000008ec g     F .text	00000028 memcpy
000008c0 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00000608 g     F .text	00000064 .hidden __udivsi3
0002012c g       *ABS*	00000000 __bss_end
0000077c g     F .text	00000068 alt_iic_isr_register
00020000 g       *ABS*	00000000 __alt_mem_ram_0
00000764 g     F .text	00000018 alt_ic_irq_enabled
00020018 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
000008b8 g     F .text	00000004 alt_dcache_flush_all
00020004 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __ram_rodata_end
0000066c g     F .text	0000005c .hidden __umodsi3
0002012c g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00022000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
000008b4 g     F .text	00000004 alt_sys_init
000006c8 g     F .text	00000028 .hidden __mulsi3
00020000 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
0002012c g       *ABS*	00000000 __alt_stack_base
00020004 g       *ABS*	00000000 __bss_start
000004b4 g     F .text	00000060 main
0002001c g     O .bss	00000004 alt_envp
00000514 g     F .text	00000080 .hidden __divsi3
00000914 g       *ABS*	00000000 __flash_rodata_start
00000894 g     F .text	00000020 alt_irq_init
00020024 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
000006f0 g     F .text	00000004 alt_ic_isr_register
00020004 g       *ABS*	00000000 _edata
0002012c g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
0000072c g     F .text	00000038 alt_ic_irq_disable
00000594 g     F .text	00000074 .hidden __modsi3
00022000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
0000000c g       .entry	00000000 _exit
000008bc g     F .text	00000004 alt_icache_flush_all
00020000 g     O .rwdata	00000004 alt_priority_mask
000006f4 g     F .text	00000038 alt_ic_irq_enable
000007e4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	040000b4 	movhi	r16,2
 110:	84000b04 	addi	r16,r16,44
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00a17 	ldw	r2,-32728(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
 188:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
 19c:	18c04b14 	ori	r3,r3,300

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	00007e40 	call	7e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00008680 	call	868 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <display_nums>:
static int min = 0;
static int mode = 0;

static unsigned display_nums(unsigned curr_num){

	switch (curr_num)
 1bc:	208004a0 	cmpeqi	r2,r4,18
 1c0:	10001b1e 	bne	r2,zero,230 <display_nums+0x74>
 1c4:	208004e8 	cmpgeui	r2,r4,19
 1c8:	10000c1e 	bne	r2,zero,1fc <display_nums+0x40>
 1cc:	208001a0 	cmpeqi	r2,r4,6
 1d0:	1000191e 	bne	r2,zero,238 <display_nums+0x7c>
 1d4:	208001e8 	cmpgeui	r2,r4,7
 1d8:	1000061e 	bne	r2,zero,1f4 <display_nums+0x38>
 1dc:	20001826 	beq	r4,zero,240 <display_nums+0x84>
 1e0:	21000060 	cmpeqi	r4,r4,1
	      {
	         case DISP_0:
	         return DISP_1;
 1e4:	008013c4 	movi	r2,79
	switch (curr_num)
 1e8:	2000101e 	bne	r4,zero,22c <display_nums+0x70>
	         case DISP_8:
	         return DISP_9;
	         break;

	         default:
	         return DISP_0;
 1ec:	00800044 	movi	r2,1
 1f0:	f800283a 	ret
	switch (curr_num)
 1f4:	208003d8 	cmpnei	r2,r4,15
 1f8:	f800283a 	ret
 1fc:	20801320 	cmpeqi	r2,r4,76
 200:	1000111e 	bne	r2,zero,248 <display_nums+0x8c>
 204:	20801368 	cmpgeui	r2,r4,77
 208:	1000051e 	bne	r2,zero,220 <display_nums+0x64>
 20c:	20800820 	cmpeqi	r2,r4,32
 210:	10000f1e 	bne	r2,zero,250 <display_nums+0x94>
 214:	21000920 	cmpeqi	r4,r4,36
	         return DISP_6;
 218:	00800804 	movi	r2,32
 21c:	003ff206 	br	1e8 <display_nums+0x2c>
	switch (curr_num)
 220:	210013e0 	cmpeqi	r4,r4,79
 224:	203ff126 	beq	r4,zero,1ec <display_nums+0x30>
 228:	00800484 	movi	r2,18
	      }
}
 22c:	f800283a 	ret
	         return DISP_3;
 230:	00800184 	movi	r2,6
 234:	f800283a 	ret
	         return DISP_4;
 238:	00801304 	movi	r2,76
 23c:	f800283a 	ret
	         return DISP_9;
 240:	00800304 	movi	r2,12
 244:	f800283a 	ret
	         return DISP_5;
 248:	00800904 	movi	r2,36
 24c:	f800283a 	ret
	         return DISP_7;
 250:	008003c4 	movi	r2,15
 254:	f800283a 	ret

00000258 <display_seconds>:

static unsigned display_seconds(unsigned curr_num){

	switch (curr_num)
 258:	20800920 	cmpeqi	r2,r4,36
 25c:	1000101e 	bne	r2,zero,2a0 <display_seconds+0x48>
 260:	20800968 	cmpgeui	r2,r4,37
 264:	1000081e 	bne	r2,zero,288 <display_seconds+0x30>
 268:	208001a0 	cmpeqi	r2,r4,6
 26c:	10000e1e 	bne	r2,zero,2a8 <display_seconds+0x50>
 270:	208004a0 	cmpeqi	r2,r4,18
 274:	10000e1e 	bne	r2,zero,2b0 <display_seconds+0x58>
 278:	21000060 	cmpeqi	r4,r4,1
 27c:	20000e1e 	bne	r4,zero,2b8 <display_seconds+0x60>
	         case DISP_5:
	         return DISP_6;
	         break;

	         default:
	         return DISP_0;
 280:	00800044 	movi	r2,1
 284:	f800283a 	ret
	switch (curr_num)
 288:	20801320 	cmpeqi	r2,r4,76
 28c:	10000c1e 	bne	r2,zero,2c0 <display_seconds+0x68>
 290:	210013e0 	cmpeqi	r4,r4,79
 294:	00800484 	movi	r2,18
 298:	203ff926 	beq	r4,zero,280 <display_seconds+0x28>
	      }
}
 29c:	f800283a 	ret
	         return DISP_6;
 2a0:	00800804 	movi	r2,32
 2a4:	f800283a 	ret
	         return DISP_4;
 2a8:	00801304 	movi	r2,76
 2ac:	f800283a 	ret
	         return DISP_3;
 2b0:	00800184 	movi	r2,6
 2b4:	f800283a 	ret
	         return DISP_1;
 2b8:	008013c4 	movi	r2,79
 2bc:	f800283a 	ret
	         return DISP_5;
 2c0:	00800904 	movi	r2,36
 2c4:	003ff506 	br	29c <display_seconds+0x44>

000002c8 <begin>:
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
}

static void begin(){

	IOWR(DISP_0_BASE,0,DISP_0);
 2c8:	00800044 	movi	r2,1
 2cc:	00c00134 	movhi	r3,4
 2d0:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_1_BASE,0,DISP_0);
 2d4:	00c00174 	movhi	r3,5
 2d8:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_2_BASE,0,DISP_0);
 2dc:	00c00474 	movhi	r3,17
 2e0:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_3_BASE,0,DISP_0);
 2e4:	00c001b4 	movhi	r3,6
 2e8:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_4_BASE,0,DISP_0);
 2ec:	00c001f4 	movhi	r3,7
 2f0:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_5_BASE,0,DISP_0);
 2f4:	00c00234 	movhi	r3,8
 2f8:	18800035 	stwio	r2,0(r3)

	unsigned swi1 = IORD(SWITCH_MODE_0_BASE,0);
 2fc:	00800274 	movhi	r2,9
 300:	10c00037 	ldwio	r3,0(r2)
	unsigned swi2 = IORD(SWITCH_MODE_1_BASE,0);
 304:	00800434 	movhi	r2,16
 308:	10800037 	ldwio	r2,0(r2)
	if (swi1 == 0 && swi2 == 0){
 30c:	1800081e 	bne	r3,zero,330 <begin+0x68>
 310:	10000926 	beq	r2,zero,338 <begin+0x70>
		mode = 1;
	} else if (swi1 == 0 && swi2 == 1){
 314:	10800058 	cmpnei	r2,r2,1
 318:	10800084 	addi	r2,r2,2
		mode = 1;
 31c:	d0a00215 	stw	r2,-32760(gp)
		mode = 2;
	} else {
		mode = 3;
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0);
 320:	008004b4 	movhi	r2,18
 324:	10000335 	stwio	zero,12(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE);
 328:	10800337 	ldwio	r2,12(r2)
}
 32c:	f800283a 	ret
 330:	008000c4 	movi	r2,3
 334:	003ff906 	br	31c <begin+0x54>
 338:	00800044 	movi	r2,1
 33c:	003ff706 	br	31c <begin+0x54>

00000340 <timer_isr>:
	ms++;
 340:	d1200517 	ldw	r4,-32748(gp)
	if (mode != 2) {
 344:	d0a00217 	ldw	r2,-32760(gp)
{
 348:	deffff04 	addi	sp,sp,-4
	ms++;
 34c:	21000044 	addi	r4,r4,1
{
 350:	dfc00015 	stw	ra,0(sp)
	ms++;
 354:	d1200515 	stw	r4,-32748(gp)
	if (mode != 2) {
 358:	10800098 	cmpnei	r2,r2,2
 35c:	10001126 	beq	r2,zero,3a4 <timer_isr+0x64>
		if (ms % 10 == 0) { // disp 0 de los milisegundos
 360:	01400284 	movi	r5,10
 364:	00005940 	call	594 <__modsi3>
 368:	1000051e 	bne	r2,zero,380 <timer_isr+0x40>
			unsigned next = display_nums(current);
 36c:	00800134 	movhi	r2,4
 370:	11000037 	ldwio	r4,0(r2)
 374:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_0_BASE, next);
 378:	00c00134 	movhi	r3,4
 37c:	18800035 	stwio	r2,0(r3)
 380:	d1200517 	ldw	r4,-32748(gp)
 384:	01401904 	movi	r5,100
 388:	00005940 	call	594 <__modsi3>
		if (ms % 100 == 0) { // disp 1 de los milisegundos
 38c:	1000051e 	bne	r2,zero,3a4 <timer_isr+0x64>
			unsigned next = display_nums(current);
 390:	00800174 	movhi	r2,5
 394:	11000037 	ldwio	r4,0(r2)
 398:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_1_BASE, next);
 39c:	00c00174 	movhi	r3,5
 3a0:	18800035 	stwio	r2,0(r3)
	if (ms == 999) {
 3a4:	d0a00517 	ldw	r2,-32748(gp)
 3a8:	1080f9d8 	cmpnei	r2,r2,999
 3ac:	10000d1e 	bne	r2,zero,3e4 <timer_isr+0xa4>
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3b0:	d0e00117 	ldw	r3,-32764(gp)
		sec++;
 3b4:	d0a00417 	ldw	r2,-32752(gp)
		ms = 0;
 3b8:	d0200515 	stw	zero,-32748(gp)
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3bc:	1806907a 	slli	r3,r3,1
		sec++;
 3c0:	10800044 	addi	r2,r2,1
 3c4:	d0a00415 	stw	r2,-32752(gp)
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3c8:	00800074 	movhi	r2,1
 3cc:	10800037 	ldwio	r2,0(r2)
 3d0:	1080004c 	andi	r2,r2,1
 3d4:	10c4b03a 	or	r2,r2,r3
 3d8:	d0a00115 	stw	r2,-32764(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, leds);
 3dc:	00c004f4 	movhi	r3,19
 3e0:	18800035 	stwio	r2,0(r3)
	if (mode != 1) {
 3e4:	d0a00217 	ldw	r2,-32760(gp)
		if (sec != 0) {
 3e8:	d0e00417 	ldw	r3,-32752(gp)
	if (mode != 1) {
 3ec:	10800058 	cmpnei	r2,r2,1
 3f0:	10001026 	beq	r2,zero,434 <timer_isr+0xf4>
		if (sec != 0) {
 3f4:	18000526 	beq	r3,zero,40c <timer_isr+0xcc>
			unsigned next = display_nums(current);
 3f8:	00800474 	movhi	r2,17
 3fc:	11000037 	ldwio	r4,0(r2)
 400:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_2_BASE, next);
 404:	00c00474 	movhi	r3,17
 408:	18800035 	stwio	r2,0(r3)
		if (sec != 0 && sec % 10 == 0) {
 40c:	d1200417 	ldw	r4,-32752(gp)
 410:	20000f26 	beq	r4,zero,450 <timer_isr+0x110>
 414:	01400284 	movi	r5,10
 418:	00005940 	call	594 <__modsi3>
 41c:	1000051e 	bne	r2,zero,434 <timer_isr+0xf4>
			unsigned next = display_seconds(current);
 420:	008001b4 	movhi	r2,6
 424:	11000037 	ldwio	r4,0(r2)
 428:	00002580 	call	258 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_3_BASE, next);
 42c:	00c001b4 	movhi	r3,6
 430:	18800035 	stwio	r2,0(r3)
	if (sec == 59) {
 434:	d0a00417 	ldw	r2,-32752(gp)
 438:	10800ed8 	cmpnei	r2,r2,59
 43c:	1000041e 	bne	r2,zero,450 <timer_isr+0x110>
		min++;
 440:	d0a00317 	ldw	r2,-32756(gp)
		sec = 0;
 444:	d0200415 	stw	zero,-32752(gp)
		min++;
 448:	10800044 	addi	r2,r2,1
 44c:	d0a00315 	stw	r2,-32756(gp)
	if (mode == 3) {
 450:	d0a00217 	ldw	r2,-32760(gp)
 454:	108000e0 	cmpeqi	r2,r2,3
 458:	10001126 	beq	r2,zero,4a0 <timer_isr+0x160>
		if (min != 0) {
 45c:	d0a00317 	ldw	r2,-32756(gp)
 460:	10000526 	beq	r2,zero,478 <timer_isr+0x138>
			unsigned next = display_seconds(current);
 464:	008001f4 	movhi	r2,7
 468:	11000037 	ldwio	r4,0(r2)
 46c:	00002580 	call	258 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_4_BASE, next);
 470:	00c001f4 	movhi	r3,7
 474:	18800035 	stwio	r2,0(r3)
		if (min != 0 && min % 10 == 0) {
 478:	d1200317 	ldw	r4,-32756(gp)
 47c:	20000826 	beq	r4,zero,4a0 <timer_isr+0x160>
 480:	01400284 	movi	r5,10
 484:	00005940 	call	594 <__modsi3>
 488:	1000051e 	bne	r2,zero,4a0 <timer_isr+0x160>
			unsigned next = display_seconds(current);
 48c:	00800234 	movhi	r2,8
 490:	11000037 	ldwio	r4,0(r2)
 494:	00002580 	call	258 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_5_BASE, next);
 498:	00c00234 	movhi	r3,8
 49c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 4a0:	008000f4 	movhi	r2,3
 4a4:	10000035 	stwio	zero,0(r2)
}
 4a8:	dfc00017 	ldw	ra,0(sp)
 4ac:	dec00104 	addi	sp,sp,4
 4b0:	f800283a 	ret

000004b4 <main>:

int main()
{
 4b4:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(
 4b8:	01800034 	movhi	r6,0
 4bc:	d8000015 	stw	zero,0(sp)
 4c0:	000f883a 	mov	r7,zero
 4c4:	3180d004 	addi	r6,r6,832
 4c8:	000b883a 	mov	r5,zero
 4cc:	0009883a 	mov	r4,zero
{
 4d0:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 4d4:	00006f00 	call	6f0 <alt_ic_isr_register>
				timer_isr,
				NULL,
				NULL
		);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 4d8:	00c000c4 	movi	r3,3
 4dc:	008000f4 	movhi	r2,3
 4e0:	10c00135 	stwio	r3,4(r2)
					TIMER_0_BASE,
					  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
					| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_BUTTON_0_BASE, 0xf);
 4e4:	00c003c4 	movi	r3,15
 4e8:	008004b4 	movhi	r2,18
 4ec:	10c00235 	stwio	r3,8(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0x0);
 4f0:	10000335 	stwio	zero,12(r2)

	alt_ic_isr_register(
 4f4:	01800034 	movhi	r6,0
 4f8:	d8000015 	stw	zero,0(sp)
 4fc:	000f883a 	mov	r7,zero
 500:	3180b204 	addi	r6,r6,712
 504:	01400044 	movi	r5,1
 508:	0009883a 	mov	r4,zero
 50c:	00006f00 	call	6f0 <alt_ic_isr_register>
			START_BUTTON_0_IRQ_INTERRUPT_CONTROLLER_ID,
			START_BUTTON_0_IRQ,
			begin,
			NULL, NULL);

	while (1);
 510:	003fff06 	br	510 <main+0x5c>

00000514 <__divsi3>:
 514:	20001a16 	blt	r4,zero,580 <__divsi3+0x6c>
 518:	000f883a 	mov	r7,zero
 51c:	2800020e 	bge	r5,zero,528 <__divsi3+0x14>
 520:	014bc83a 	sub	r5,zero,r5
 524:	39c0005c 	xori	r7,r7,1
 528:	200d883a 	mov	r6,r4
 52c:	00c00044 	movi	r3,1
 530:	2900092e 	bgeu	r5,r4,558 <__divsi3+0x44>
 534:	00800804 	movi	r2,32
 538:	00c00044 	movi	r3,1
 53c:	00000106 	br	544 <__divsi3+0x30>
 540:	10001226 	beq	r2,zero,58c <__divsi3+0x78>
 544:	294b883a 	add	r5,r5,r5
 548:	10bfffc4 	addi	r2,r2,-1
 54c:	18c7883a 	add	r3,r3,r3
 550:	293ffb36 	bltu	r5,r4,540 <__divsi3+0x2c>
 554:	18000d26 	beq	r3,zero,58c <__divsi3+0x78>
 558:	0005883a 	mov	r2,zero
 55c:	31400236 	bltu	r6,r5,568 <__divsi3+0x54>
 560:	314dc83a 	sub	r6,r6,r5
 564:	10c4b03a 	or	r2,r2,r3
 568:	1806d07a 	srli	r3,r3,1
 56c:	280ad07a 	srli	r5,r5,1
 570:	183ffa1e 	bne	r3,zero,55c <__divsi3+0x48>
 574:	38000126 	beq	r7,zero,57c <__divsi3+0x68>
 578:	0085c83a 	sub	r2,zero,r2
 57c:	f800283a 	ret
 580:	0109c83a 	sub	r4,zero,r4
 584:	01c00044 	movi	r7,1
 588:	003fe406 	br	51c <__divsi3+0x8>
 58c:	0005883a 	mov	r2,zero
 590:	003ff806 	br	574 <__divsi3+0x60>

00000594 <__modsi3>:
 594:	20001716 	blt	r4,zero,5f4 <__modsi3+0x60>
 598:	000f883a 	mov	r7,zero
 59c:	2005883a 	mov	r2,r4
 5a0:	2800010e 	bge	r5,zero,5a8 <__modsi3+0x14>
 5a4:	014bc83a 	sub	r5,zero,r5
 5a8:	00c00044 	movi	r3,1
 5ac:	2900092e 	bgeu	r5,r4,5d4 <__modsi3+0x40>
 5b0:	01800804 	movi	r6,32
 5b4:	00c00044 	movi	r3,1
 5b8:	00000106 	br	5c0 <__modsi3+0x2c>
 5bc:	30001026 	beq	r6,zero,600 <__modsi3+0x6c>
 5c0:	294b883a 	add	r5,r5,r5
 5c4:	31bfffc4 	addi	r6,r6,-1
 5c8:	18c7883a 	add	r3,r3,r3
 5cc:	293ffb36 	bltu	r5,r4,5bc <__modsi3+0x28>
 5d0:	18000b26 	beq	r3,zero,600 <__modsi3+0x6c>
 5d4:	1806d07a 	srli	r3,r3,1
 5d8:	11400136 	bltu	r2,r5,5e0 <__modsi3+0x4c>
 5dc:	1145c83a 	sub	r2,r2,r5
 5e0:	280ad07a 	srli	r5,r5,1
 5e4:	183ffb1e 	bne	r3,zero,5d4 <__modsi3+0x40>
 5e8:	38000126 	beq	r7,zero,5f0 <__modsi3+0x5c>
 5ec:	0085c83a 	sub	r2,zero,r2
 5f0:	f800283a 	ret
 5f4:	0109c83a 	sub	r4,zero,r4
 5f8:	01c00044 	movi	r7,1
 5fc:	003fe706 	br	59c <__modsi3+0x8>
 600:	2005883a 	mov	r2,r4
 604:	003ff806 	br	5e8 <__modsi3+0x54>

00000608 <__udivsi3>:
 608:	200d883a 	mov	r6,r4
 60c:	2900152e 	bgeu	r5,r4,664 <__udivsi3+0x5c>
 610:	28001416 	blt	r5,zero,664 <__udivsi3+0x5c>
 614:	00800804 	movi	r2,32
 618:	00c00044 	movi	r3,1
 61c:	00000206 	br	628 <__udivsi3+0x20>
 620:	10000e26 	beq	r2,zero,65c <__udivsi3+0x54>
 624:	28000416 	blt	r5,zero,638 <__udivsi3+0x30>
 628:	294b883a 	add	r5,r5,r5
 62c:	10bfffc4 	addi	r2,r2,-1
 630:	18c7883a 	add	r3,r3,r3
 634:	293ffa36 	bltu	r5,r4,620 <__udivsi3+0x18>
 638:	18000826 	beq	r3,zero,65c <__udivsi3+0x54>
 63c:	0005883a 	mov	r2,zero
 640:	31400236 	bltu	r6,r5,64c <__udivsi3+0x44>
 644:	314dc83a 	sub	r6,r6,r5
 648:	10c4b03a 	or	r2,r2,r3
 64c:	1806d07a 	srli	r3,r3,1
 650:	280ad07a 	srli	r5,r5,1
 654:	183ffa1e 	bne	r3,zero,640 <__udivsi3+0x38>
 658:	f800283a 	ret
 65c:	0005883a 	mov	r2,zero
 660:	f800283a 	ret
 664:	00c00044 	movi	r3,1
 668:	003ff406 	br	63c <__udivsi3+0x34>

0000066c <__umodsi3>:
 66c:	2005883a 	mov	r2,r4
 670:	2900132e 	bgeu	r5,r4,6c0 <__umodsi3+0x54>
 674:	28001216 	blt	r5,zero,6c0 <__umodsi3+0x54>
 678:	01800804 	movi	r6,32
 67c:	00c00044 	movi	r3,1
 680:	00000206 	br	68c <__umodsi3+0x20>
 684:	30000c26 	beq	r6,zero,6b8 <__umodsi3+0x4c>
 688:	28000416 	blt	r5,zero,69c <__umodsi3+0x30>
 68c:	294b883a 	add	r5,r5,r5
 690:	31bfffc4 	addi	r6,r6,-1
 694:	18c7883a 	add	r3,r3,r3
 698:	293ffa36 	bltu	r5,r4,684 <__umodsi3+0x18>
 69c:	18000626 	beq	r3,zero,6b8 <__umodsi3+0x4c>
 6a0:	1806d07a 	srli	r3,r3,1
 6a4:	11400136 	bltu	r2,r5,6ac <__umodsi3+0x40>
 6a8:	1145c83a 	sub	r2,r2,r5
 6ac:	280ad07a 	srli	r5,r5,1
 6b0:	183ffb1e 	bne	r3,zero,6a0 <__umodsi3+0x34>
 6b4:	f800283a 	ret
 6b8:	2005883a 	mov	r2,r4
 6bc:	f800283a 	ret
 6c0:	00c00044 	movi	r3,1
 6c4:	003ff606 	br	6a0 <__umodsi3+0x34>

000006c8 <__mulsi3>:
 6c8:	0005883a 	mov	r2,zero
 6cc:	20000726 	beq	r4,zero,6ec <__mulsi3+0x24>
 6d0:	20c0004c 	andi	r3,r4,1
 6d4:	2008d07a 	srli	r4,r4,1
 6d8:	18000126 	beq	r3,zero,6e0 <__mulsi3+0x18>
 6dc:	1145883a 	add	r2,r2,r5
 6e0:	294b883a 	add	r5,r5,r5
 6e4:	203ffa1e 	bne	r4,zero,6d0 <__mulsi3+0x8>
 6e8:	f800283a 	ret
 6ec:	f800283a 	ret

000006f0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 6f0:	000077c1 	jmpi	77c <alt_iic_isr_register>

000006f4 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 6f4:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6f8:	00bfff84 	movi	r2,-2
 6fc:	1884703a 	and	r2,r3,r2
 700:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 704:	00800044 	movi	r2,1
 708:	d1200617 	ldw	r4,-32744(gp)
 70c:	114a983a 	sll	r5,r2,r5
 710:	290ab03a 	or	r5,r5,r4
 714:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 718:	d0a00617 	ldw	r2,-32744(gp)
 71c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 720:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 724:	0005883a 	mov	r2,zero
 728:	f800283a 	ret

0000072c <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 72c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 730:	00bfff84 	movi	r2,-2
 734:	1884703a 	and	r2,r3,r2
 738:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 73c:	00bfff84 	movi	r2,-2
 740:	d1200617 	ldw	r4,-32744(gp)
 744:	114a183a 	rol	r5,r2,r5
 748:	290a703a 	and	r5,r5,r4
 74c:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 750:	d0a00617 	ldw	r2,-32744(gp)
 754:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 758:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 75c:	0005883a 	mov	r2,zero
 760:	f800283a 	ret

00000764 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 764:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 768:	00800044 	movi	r2,1
 76c:	1144983a 	sll	r2,r2,r5
 770:	10c4703a 	and	r2,r2,r3
}
 774:	1004c03a 	cmpne	r2,r2,zero
 778:	f800283a 	ret

0000077c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 77c:	28800808 	cmpgei	r2,r5,32
 780:	1000161e 	bne	r2,zero,7dc <alt_iic_isr_register+0x60>
{
 784:	defffe04 	addi	sp,sp,-8
 788:	dfc00115 	stw	ra,4(sp)
 78c:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 790:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 794:	00bfff84 	movi	r2,-2
 798:	8084703a 	and	r2,r16,r2
 79c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 7a0:	280690fa 	slli	r3,r5,3
 7a4:	008000b4 	movhi	r2,2
 7a8:	10800b04 	addi	r2,r2,44
 7ac:	10c5883a 	add	r2,r2,r3
 7b0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 7b4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 7b8:	30000626 	beq	r6,zero,7d4 <alt_iic_isr_register+0x58>
 7bc:	00006f40 	call	6f4 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 7c0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 7c4:	dfc00117 	ldw	ra,4(sp)
 7c8:	dc000017 	ldw	r16,0(sp)
 7cc:	dec00204 	addi	sp,sp,8
 7d0:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 7d4:	000072c0 	call	72c <alt_ic_irq_disable>
 7d8:	003ff906 	br	7c0 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 7dc:	00bffa84 	movi	r2,-22
}
 7e0:	f800283a 	ret

000007e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 7e4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 7e8:	010000b4 	movhi	r4,2
 7ec:	01400034 	movhi	r5,0
 7f0:	dfc00015 	stw	ra,0(sp)
 7f4:	21000004 	addi	r4,r4,0
 7f8:	29424504 	addi	r5,r5,2324
 7fc:	21400426 	beq	r4,r5,810 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 800:	018000b4 	movhi	r6,2
 804:	31800104 	addi	r6,r6,4
 808:	310dc83a 	sub	r6,r6,r4
 80c:	00008ec0 	call	8ec <memcpy>
  if (to != from)
 810:	01000034 	movhi	r4,0
 814:	01400034 	movhi	r5,0
 818:	21000804 	addi	r4,r4,32
 81c:	29400804 	addi	r5,r5,32
 820:	21400426 	beq	r4,r5,834 <alt_load+0x50>
      *to++ = *from++;
 824:	01800034 	movhi	r6,0
 828:	31806004 	addi	r6,r6,384
 82c:	310dc83a 	sub	r6,r6,r4
 830:	00008ec0 	call	8ec <memcpy>
  if (to != from)
 834:	010000b4 	movhi	r4,2
 838:	01400034 	movhi	r5,0
 83c:	21000004 	addi	r4,r4,0
 840:	29424504 	addi	r5,r5,2324
 844:	21400426 	beq	r4,r5,858 <alt_load+0x74>
      *to++ = *from++;
 848:	018000b4 	movhi	r6,2
 84c:	31800004 	addi	r6,r6,0
 850:	310dc83a 	sub	r6,r6,r4
 854:	00008ec0 	call	8ec <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 858:	00008b80 	call	8b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 85c:	dfc00017 	ldw	ra,0(sp)
 860:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 864:	00008bc1 	jmpi	8bc <alt_icache_flush_all>

00000868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 868:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 86c:	0009883a 	mov	r4,zero
{
 870:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 874:	00008940 	call	894 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 878:	00008b40 	call	8b4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 87c:	d1a00717 	ldw	r6,-32740(gp)
 880:	d1600817 	ldw	r5,-32736(gp)
 884:	d1200917 	ldw	r4,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 888:	dfc00017 	ldw	ra,0(sp)
 88c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 890:	00004b41 	jmpi	4b4 <main>

00000894 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 894:	deffff04 	addi	sp,sp,-4
 898:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 89c:	00008e40 	call	8e4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8a0:	00800044 	movi	r2,1
 8a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8a8:	dfc00017 	ldw	ra,0(sp)
 8ac:	dec00104 	addi	sp,sp,4
 8b0:	f800283a 	ret

000008b4 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 8b4:	f800283a 	ret

000008b8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8b8:	f800283a 	ret

000008bc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8bc:	f800283a 	ret

000008c0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 8c0:	213ffe84 	addi	r4,r4,-6
 8c4:	20800428 	cmpgeui	r2,r4,16
 8c8:	1000041e 	bne	r2,zero,8dc <alt_exception_cause_generated_bad_addr+0x1c>
 8cc:	00a2c8d4 	movui	r2,35619
 8d0:	1104d83a 	srl	r2,r2,r4
 8d4:	1080004c 	andi	r2,r2,1
 8d8:	f800283a 	ret
 8dc:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
 8e0:	f800283a 	ret

000008e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8e4:	000170fa 	wrctl	ienable,zero
}
 8e8:	f800283a 	ret

000008ec <memcpy>:
 8ec:	2005883a 	mov	r2,r4
 8f0:	0007883a 	mov	r3,zero
 8f4:	30c0011e 	bne	r6,r3,8fc <memcpy+0x10>
 8f8:	f800283a 	ret
 8fc:	28cf883a 	add	r7,r5,r3
 900:	39c00003 	ldbu	r7,0(r7)
 904:	10c9883a 	add	r4,r2,r3
 908:	18c00044 	addi	r3,r3,1
 90c:	21c00005 	stb	r7,0(r4)
 910:	003ff806 	br	8f4 <memcpy+0x8>
