
Cronometro.elf:     file format elf32-littlenios2
Cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000904 memsz 0x00000904 flags r-x
    LOAD off    0x00002000 vaddr 0x00020000 paddr 0x00000924 align 2**12
         filesz 0x00000004 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000007a4  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00020000  00000928  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00020000  00000924  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00020004  00000928  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  00000928  00000928  00002004  2**0
                  CONTENTS
  7 .ram_0        00000000  0002012c  0002012c  00002004  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000270  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000019d1  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000e12  00000000  00000000  00003c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00000f39  00000000  00000000  00004a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000002e8  00000000  00000000  000059c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000a4b  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000066f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00006708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000008d0  00000000  00000000  00006778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000e6  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000673  00000000  00000000  0000712e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0000895e  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  00008961  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00008966  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00008967  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00008968  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000896c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0000897e  2**0
                  CONTENTS, READONLY
 29 .jdi          000001f6  00000000  00000000  000089b7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000782a6  00000000  00000000  00008bad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
00020000 l    d  .rwdata	00000000 .rwdata
00020004 l    d  .bss	00000000 .bss
00000928 l    d  .rom_0	00000000 .rom_0
0002012c l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Cronometro.c
000001bc l     F .text	000000ac display_nums
00000268 l     F .text	00000070 display_seconds
000002d8 l     F .text	00000078 begin
00020008 l     O .bss	00000004 mode
00000350 l     F .text	00000174 timer_isr
00020014 l     O .bss	00000004 ms
00020004 l     O .bss	00000004 leds
00020010 l     O .bss	00000004 sec
0002000c l     O .bss	00000004 min
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00020028 g     O .bss	00000004 alt_instruction_exception_handler
00000878 g     F .text	0000002c alt_main
0002002c g     O .bss	00000100 alt_irq
00000924 g       *ABS*	00000000 __flash_rwdata_start
000008f4 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00020020 g     O .bss	00000004 alt_argv
00028000 g       *ABS*	00000000 _gp
000008fc g     F .text	00000028 memcpy
000008d0 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00000618 g     F .text	00000064 .hidden __udivsi3
0002012c g       *ABS*	00000000 __bss_end
0000078c g     F .text	00000068 alt_iic_isr_register
00020000 g       *ABS*	00000000 __alt_mem_ram_0
00000774 g     F .text	00000018 alt_ic_irq_enabled
00020018 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
000008c8 g     F .text	00000004 alt_dcache_flush_all
00020004 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __ram_rodata_end
0000067c g     F .text	0000005c .hidden __umodsi3
0002012c g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00022000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
000008c4 g     F .text	00000004 alt_sys_init
000006d8 g     F .text	00000028 .hidden __mulsi3
00020000 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
0002012c g       *ABS*	00000000 __alt_stack_base
00020004 g       *ABS*	00000000 __bss_start
000004c4 g     F .text	00000060 main
0002001c g     O .bss	00000004 alt_envp
00000524 g     F .text	00000080 .hidden __divsi3
00000924 g       *ABS*	00000000 __flash_rodata_start
000008a4 g     F .text	00000020 alt_irq_init
00020024 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000700 g     F .text	00000004 alt_ic_isr_register
00020004 g       *ABS*	00000000 _edata
0002012c g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
0000073c g     F .text	00000038 alt_ic_irq_disable
000005a4 g     F .text	00000074 .hidden __modsi3
00022000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
0000000c g       .entry	00000000 _exit
000008cc g     F .text	00000004 alt_icache_flush_all
00020000 g     O .rwdata	00000004 alt_priority_mask
00000704 g     F .text	00000038 alt_ic_irq_enable
000007f4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	040000b4 	movhi	r16,2
 110:	84000b04 	addi	r16,r16,44
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00a17 	ldw	r2,-32728(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
 188:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
 19c:	18c04b14 	ori	r3,r3,300

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	00007f40 	call	7f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00008780 	call	878 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <display_nums>:
static int min = 0;
static int mode = 0;

static unsigned display_nums(unsigned curr_num){

	switch (curr_num)
 1bc:	20801b60 	cmpeqi	r2,r4,109
 1c0:	10001d1e 	bne	r2,zero,238 <display_nums+0x7c>
 1c4:	20801ba8 	cmpgeui	r2,r4,110
 1c8:	10000e1e 	bne	r2,zero,204 <display_nums+0x48>
 1cc:	208016e0 	cmpeqi	r2,r4,91
 1d0:	10001b1e 	bne	r2,zero,240 <display_nums+0x84>
 1d4:	20801728 	cmpgeui	r2,r4,92
 1d8:	1000061e 	bne	r2,zero,1f4 <display_nums+0x38>
 1dc:	20800c20 	cmpeqi	r2,r4,48
 1e0:	1000191e 	bne	r2,zero,248 <display_nums+0x8c>
 1e4:	21000ce0 	cmpeqi	r4,r4,51
	         case DISP_3:
	         return DISP_4;
	         break;

	         case DISP_4:
	         return DISP_5;
 1e8:	008016c4 	movi	r2,91
	switch (curr_num)
 1ec:	20000326 	beq	r4,zero,1fc <display_nums+0x40>
	         break;

	         default:
	         return DISP_0;
	      }
}
 1f0:	f800283a 	ret
	switch (curr_num)
 1f4:	210017e0 	cmpeqi	r4,r4,95
 1f8:	2000151e 	bne	r4,zero,250 <display_nums+0x94>
	         return DISP_0;
 1fc:	00801f84 	movi	r2,126
 200:	f800283a 	ret
	switch (curr_num)
 204:	20801fa0 	cmpeqi	r2,r4,126
 208:	1000131e 	bne	r2,zero,258 <display_nums+0x9c>
 20c:	20801fe8 	cmpgeui	r2,r4,127
 210:	1000051e 	bne	r2,zero,228 <display_nums+0x6c>
 214:	20801c20 	cmpeqi	r2,r4,112
 218:	1000111e 	bne	r2,zero,260 <display_nums+0xa4>
 21c:	21001e60 	cmpeqi	r4,r4,121
	         return DISP_4;
 220:	00800cc4 	movi	r2,51
 224:	003ff106 	br	1ec <display_nums+0x30>
	switch (curr_num)
 228:	21001fe0 	cmpeqi	r4,r4,127
 22c:	203ff326 	beq	r4,zero,1fc <display_nums+0x40>
	         return DISP_9;
 230:	00801cc4 	movi	r2,115
 234:	003fee06 	br	1f0 <display_nums+0x34>
	         return DISP_3;
 238:	00801e44 	movi	r2,121
 23c:	f800283a 	ret
	         return DISP_6;
 240:	008017c4 	movi	r2,95
 244:	f800283a 	ret
	switch (curr_num)
 248:	00801b44 	movi	r2,109
 24c:	f800283a 	ret
	         return DISP_7;
 250:	00801c04 	movi	r2,112
 254:	f800283a 	ret
	         return DISP_1;
 258:	00800c04 	movi	r2,48
 25c:	f800283a 	ret
	         return DISP_8;
 260:	00801fc4 	movi	r2,127
 264:	f800283a 	ret

00000268 <display_seconds>:

static unsigned display_seconds(unsigned curr_num){

	switch (curr_num)
 268:	20801b60 	cmpeqi	r2,r4,109
 26c:	1000101e 	bne	r2,zero,2b0 <display_seconds+0x48>
 270:	20801ba8 	cmpgeui	r2,r4,110
 274:	1000081e 	bne	r2,zero,298 <display_seconds+0x30>
 278:	20800ce0 	cmpeqi	r2,r4,51
 27c:	10000e1e 	bne	r2,zero,2b8 <display_seconds+0x50>
 280:	208016e0 	cmpeqi	r2,r4,91
 284:	10000e1e 	bne	r2,zero,2c0 <display_seconds+0x58>
 288:	21000c20 	cmpeqi	r4,r4,48
 28c:	20000e1e 	bne	r4,zero,2c8 <display_seconds+0x60>
	         case DISP_5:
	         return DISP_6;
	         break;

	         default:
	         return DISP_0;
 290:	00801f84 	movi	r2,126
 294:	f800283a 	ret
	switch (curr_num)
 298:	20801e60 	cmpeqi	r2,r4,121
 29c:	10000c1e 	bne	r2,zero,2d0 <display_seconds+0x68>
 2a0:	21001fa0 	cmpeqi	r4,r4,126
	         return DISP_1;
 2a4:	00800c04 	movi	r2,48
	switch (curr_num)
 2a8:	203ff926 	beq	r4,zero,290 <display_seconds+0x28>
	      }
}
 2ac:	f800283a 	ret
	         return DISP_3;
 2b0:	00801e44 	movi	r2,121
 2b4:	f800283a 	ret
	         return DISP_5;
 2b8:	008016c4 	movi	r2,91
 2bc:	f800283a 	ret
	         return DISP_6;
 2c0:	008017c4 	movi	r2,95
 2c4:	f800283a 	ret
	switch (curr_num)
 2c8:	00801b44 	movi	r2,109
 2cc:	f800283a 	ret
	         return DISP_4;
 2d0:	00800cc4 	movi	r2,51
 2d4:	003ff506 	br	2ac <display_seconds+0x44>

000002d8 <begin>:
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
}

static void begin(){

	IOWR(DISP_0_BASE,0,DISP_0);
 2d8:	00801f84 	movi	r2,126
 2dc:	00c00134 	movhi	r3,4
 2e0:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_1_BASE,0,DISP_0);
 2e4:	00c00174 	movhi	r3,5
 2e8:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_2_BASE,0,DISP_0);
 2ec:	00c00474 	movhi	r3,17
 2f0:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_3_BASE,0,DISP_0);
 2f4:	00c001b4 	movhi	r3,6
 2f8:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_4_BASE,0,DISP_0);
 2fc:	00c001f4 	movhi	r3,7
 300:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_5_BASE,0,DISP_0);
 304:	00c00234 	movhi	r3,8
 308:	18800035 	stwio	r2,0(r3)

	unsigned swi1 = IORD(SWITCH_MODE_0_BASE,0);
 30c:	00800274 	movhi	r2,9
 310:	10c00037 	ldwio	r3,0(r2)
	unsigned swi2 = IORD(SWITCH_MODE_1_BASE,0);
 314:	00800434 	movhi	r2,16
 318:	10800037 	ldwio	r2,0(r2)
	if (swi1 == 0 && swi2 == 0){
 31c:	1800081e 	bne	r3,zero,340 <begin+0x68>
 320:	10000926 	beq	r2,zero,348 <begin+0x70>
		mode = 1;
	} else if (swi1 == 0 && swi2 == 1){
 324:	10800058 	cmpnei	r2,r2,1
 328:	10800084 	addi	r2,r2,2
		mode = 1;
 32c:	d0a00215 	stw	r2,-32760(gp)
		mode = 2;
	} else {
		mode = 3;
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0);
 330:	008004b4 	movhi	r2,18
 334:	10000335 	stwio	zero,12(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE);
 338:	10800337 	ldwio	r2,12(r2)
}
 33c:	f800283a 	ret
 340:	008000c4 	movi	r2,3
 344:	003ff906 	br	32c <begin+0x54>
 348:	00800044 	movi	r2,1
 34c:	003ff706 	br	32c <begin+0x54>

00000350 <timer_isr>:
	ms++;
 350:	d1200517 	ldw	r4,-32748(gp)
	if (mode != 2) {
 354:	d0a00217 	ldw	r2,-32760(gp)
{
 358:	deffff04 	addi	sp,sp,-4
	ms++;
 35c:	21000044 	addi	r4,r4,1
{
 360:	dfc00015 	stw	ra,0(sp)
	ms++;
 364:	d1200515 	stw	r4,-32748(gp)
	if (mode != 2) {
 368:	10800098 	cmpnei	r2,r2,2
 36c:	10001126 	beq	r2,zero,3b4 <timer_isr+0x64>
		if (ms % 10 == 0) { // disp 0 de los milisegundos
 370:	01400284 	movi	r5,10
 374:	00005a40 	call	5a4 <__modsi3>
 378:	1000051e 	bne	r2,zero,390 <timer_isr+0x40>
			unsigned next = display_nums(current);
 37c:	00800134 	movhi	r2,4
 380:	11000037 	ldwio	r4,0(r2)
 384:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_0_BASE, next);
 388:	00c00134 	movhi	r3,4
 38c:	18800035 	stwio	r2,0(r3)
 390:	d1200517 	ldw	r4,-32748(gp)
 394:	01401904 	movi	r5,100
 398:	00005a40 	call	5a4 <__modsi3>
		if (ms % 100 == 0) { // disp 1 de los milisegundos
 39c:	1000051e 	bne	r2,zero,3b4 <timer_isr+0x64>
			unsigned next = display_nums(current);
 3a0:	00800174 	movhi	r2,5
 3a4:	11000037 	ldwio	r4,0(r2)
 3a8:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_1_BASE, next);
 3ac:	00c00174 	movhi	r3,5
 3b0:	18800035 	stwio	r2,0(r3)
	if (ms == 999) {
 3b4:	d0a00517 	ldw	r2,-32748(gp)
 3b8:	1080f9d8 	cmpnei	r2,r2,999
 3bc:	10000d1e 	bne	r2,zero,3f4 <timer_isr+0xa4>
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3c0:	d0e00117 	ldw	r3,-32764(gp)
		sec++;
 3c4:	d0a00417 	ldw	r2,-32752(gp)
		ms = 0;
 3c8:	d0200515 	stw	zero,-32748(gp)
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3cc:	1806907a 	slli	r3,r3,1
		sec++;
 3d0:	10800044 	addi	r2,r2,1
 3d4:	d0a00415 	stw	r2,-32752(gp)
		leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 3d8:	00800074 	movhi	r2,1
 3dc:	10800037 	ldwio	r2,0(r2)
 3e0:	1080004c 	andi	r2,r2,1
 3e4:	10c4b03a 	or	r2,r2,r3
 3e8:	d0a00115 	stw	r2,-32764(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, leds);
 3ec:	00c004f4 	movhi	r3,19
 3f0:	18800035 	stwio	r2,0(r3)
	if (mode != 1) {
 3f4:	d0a00217 	ldw	r2,-32760(gp)
		if (sec != 0) {
 3f8:	d0e00417 	ldw	r3,-32752(gp)
	if (mode != 1) {
 3fc:	10800058 	cmpnei	r2,r2,1
 400:	10001026 	beq	r2,zero,444 <timer_isr+0xf4>
		if (sec != 0) {
 404:	18000526 	beq	r3,zero,41c <timer_isr+0xcc>
			unsigned next = display_nums(current);
 408:	00800474 	movhi	r2,17
 40c:	11000037 	ldwio	r4,0(r2)
 410:	00001bc0 	call	1bc <display_nums>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_2_BASE, next);
 414:	00c00474 	movhi	r3,17
 418:	18800035 	stwio	r2,0(r3)
		if (sec != 0 && sec % 10 == 0) {
 41c:	d1200417 	ldw	r4,-32752(gp)
 420:	20000f26 	beq	r4,zero,460 <timer_isr+0x110>
 424:	01400284 	movi	r5,10
 428:	00005a40 	call	5a4 <__modsi3>
 42c:	1000051e 	bne	r2,zero,444 <timer_isr+0xf4>
			unsigned next = display_seconds(current);
 430:	008001b4 	movhi	r2,6
 434:	11000037 	ldwio	r4,0(r2)
 438:	00002680 	call	268 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_3_BASE, next);
 43c:	00c001b4 	movhi	r3,6
 440:	18800035 	stwio	r2,0(r3)
	if (sec == 59) {
 444:	d0a00417 	ldw	r2,-32752(gp)
 448:	10800ed8 	cmpnei	r2,r2,59
 44c:	1000041e 	bne	r2,zero,460 <timer_isr+0x110>
		min++;
 450:	d0a00317 	ldw	r2,-32756(gp)
		sec = 0;
 454:	d0200415 	stw	zero,-32752(gp)
		min++;
 458:	10800044 	addi	r2,r2,1
 45c:	d0a00315 	stw	r2,-32756(gp)
	if (mode == 3) {
 460:	d0a00217 	ldw	r2,-32760(gp)
 464:	108000e0 	cmpeqi	r2,r2,3
 468:	10001126 	beq	r2,zero,4b0 <timer_isr+0x160>
		if (min != 0) {
 46c:	d0a00317 	ldw	r2,-32756(gp)
 470:	10000526 	beq	r2,zero,488 <timer_isr+0x138>
			unsigned next = display_seconds(current);
 474:	008001f4 	movhi	r2,7
 478:	11000037 	ldwio	r4,0(r2)
 47c:	00002680 	call	268 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_4_BASE, next);
 480:	00c001f4 	movhi	r3,7
 484:	18800035 	stwio	r2,0(r3)
		if (min != 0 && min % 10 == 0) {
 488:	d1200317 	ldw	r4,-32756(gp)
 48c:	20000826 	beq	r4,zero,4b0 <timer_isr+0x160>
 490:	01400284 	movi	r5,10
 494:	00005a40 	call	5a4 <__modsi3>
 498:	1000051e 	bne	r2,zero,4b0 <timer_isr+0x160>
			unsigned next = display_seconds(current);
 49c:	00800234 	movhi	r2,8
 4a0:	11000037 	ldwio	r4,0(r2)
 4a4:	00002680 	call	268 <display_seconds>
			IOWR_ALTERA_AVALON_PIO_DATA(DISP_5_BASE, next);
 4a8:	00c00234 	movhi	r3,8
 4ac:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 4b0:	008000f4 	movhi	r2,3
 4b4:	10000035 	stwio	zero,0(r2)
}
 4b8:	dfc00017 	ldw	ra,0(sp)
 4bc:	dec00104 	addi	sp,sp,4
 4c0:	f800283a 	ret

000004c4 <main>:

int main()
{
 4c4:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(
 4c8:	01800034 	movhi	r6,0
 4cc:	d8000015 	stw	zero,0(sp)
 4d0:	000f883a 	mov	r7,zero
 4d4:	3180d404 	addi	r6,r6,848
 4d8:	000b883a 	mov	r5,zero
 4dc:	0009883a 	mov	r4,zero
{
 4e0:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 4e4:	00007000 	call	700 <alt_ic_isr_register>
				timer_isr,
				NULL,
				NULL
		);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 4e8:	00c000c4 	movi	r3,3
 4ec:	008000f4 	movhi	r2,3
 4f0:	10c00135 	stwio	r3,4(r2)
					TIMER_0_BASE,
					  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
					| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_BUTTON_0_BASE, 0xf);
 4f4:	00c003c4 	movi	r3,15
 4f8:	008004b4 	movhi	r2,18
 4fc:	10c00235 	stwio	r3,8(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0x0);
 500:	10000335 	stwio	zero,12(r2)

	alt_ic_isr_register(
 504:	01800034 	movhi	r6,0
 508:	d8000015 	stw	zero,0(sp)
 50c:	000f883a 	mov	r7,zero
 510:	3180b604 	addi	r6,r6,728
 514:	01400044 	movi	r5,1
 518:	0009883a 	mov	r4,zero
 51c:	00007000 	call	700 <alt_ic_isr_register>
			START_BUTTON_0_IRQ_INTERRUPT_CONTROLLER_ID,
			START_BUTTON_0_IRQ,
			begin,
			NULL, NULL);

	while (1);
 520:	003fff06 	br	520 <main+0x5c>

00000524 <__divsi3>:
 524:	20001a16 	blt	r4,zero,590 <__divsi3+0x6c>
 528:	000f883a 	mov	r7,zero
 52c:	2800020e 	bge	r5,zero,538 <__divsi3+0x14>
 530:	014bc83a 	sub	r5,zero,r5
 534:	39c0005c 	xori	r7,r7,1
 538:	200d883a 	mov	r6,r4
 53c:	00c00044 	movi	r3,1
 540:	2900092e 	bgeu	r5,r4,568 <__divsi3+0x44>
 544:	00800804 	movi	r2,32
 548:	00c00044 	movi	r3,1
 54c:	00000106 	br	554 <__divsi3+0x30>
 550:	10001226 	beq	r2,zero,59c <__divsi3+0x78>
 554:	294b883a 	add	r5,r5,r5
 558:	10bfffc4 	addi	r2,r2,-1
 55c:	18c7883a 	add	r3,r3,r3
 560:	293ffb36 	bltu	r5,r4,550 <__divsi3+0x2c>
 564:	18000d26 	beq	r3,zero,59c <__divsi3+0x78>
 568:	0005883a 	mov	r2,zero
 56c:	31400236 	bltu	r6,r5,578 <__divsi3+0x54>
 570:	314dc83a 	sub	r6,r6,r5
 574:	10c4b03a 	or	r2,r2,r3
 578:	1806d07a 	srli	r3,r3,1
 57c:	280ad07a 	srli	r5,r5,1
 580:	183ffa1e 	bne	r3,zero,56c <__divsi3+0x48>
 584:	38000126 	beq	r7,zero,58c <__divsi3+0x68>
 588:	0085c83a 	sub	r2,zero,r2
 58c:	f800283a 	ret
 590:	0109c83a 	sub	r4,zero,r4
 594:	01c00044 	movi	r7,1
 598:	003fe406 	br	52c <__divsi3+0x8>
 59c:	0005883a 	mov	r2,zero
 5a0:	003ff806 	br	584 <__divsi3+0x60>

000005a4 <__modsi3>:
 5a4:	20001716 	blt	r4,zero,604 <__modsi3+0x60>
 5a8:	000f883a 	mov	r7,zero
 5ac:	2005883a 	mov	r2,r4
 5b0:	2800010e 	bge	r5,zero,5b8 <__modsi3+0x14>
 5b4:	014bc83a 	sub	r5,zero,r5
 5b8:	00c00044 	movi	r3,1
 5bc:	2900092e 	bgeu	r5,r4,5e4 <__modsi3+0x40>
 5c0:	01800804 	movi	r6,32
 5c4:	00c00044 	movi	r3,1
 5c8:	00000106 	br	5d0 <__modsi3+0x2c>
 5cc:	30001026 	beq	r6,zero,610 <__modsi3+0x6c>
 5d0:	294b883a 	add	r5,r5,r5
 5d4:	31bfffc4 	addi	r6,r6,-1
 5d8:	18c7883a 	add	r3,r3,r3
 5dc:	293ffb36 	bltu	r5,r4,5cc <__modsi3+0x28>
 5e0:	18000b26 	beq	r3,zero,610 <__modsi3+0x6c>
 5e4:	1806d07a 	srli	r3,r3,1
 5e8:	11400136 	bltu	r2,r5,5f0 <__modsi3+0x4c>
 5ec:	1145c83a 	sub	r2,r2,r5
 5f0:	280ad07a 	srli	r5,r5,1
 5f4:	183ffb1e 	bne	r3,zero,5e4 <__modsi3+0x40>
 5f8:	38000126 	beq	r7,zero,600 <__modsi3+0x5c>
 5fc:	0085c83a 	sub	r2,zero,r2
 600:	f800283a 	ret
 604:	0109c83a 	sub	r4,zero,r4
 608:	01c00044 	movi	r7,1
 60c:	003fe706 	br	5ac <__modsi3+0x8>
 610:	2005883a 	mov	r2,r4
 614:	003ff806 	br	5f8 <__modsi3+0x54>

00000618 <__udivsi3>:
 618:	200d883a 	mov	r6,r4
 61c:	2900152e 	bgeu	r5,r4,674 <__udivsi3+0x5c>
 620:	28001416 	blt	r5,zero,674 <__udivsi3+0x5c>
 624:	00800804 	movi	r2,32
 628:	00c00044 	movi	r3,1
 62c:	00000206 	br	638 <__udivsi3+0x20>
 630:	10000e26 	beq	r2,zero,66c <__udivsi3+0x54>
 634:	28000416 	blt	r5,zero,648 <__udivsi3+0x30>
 638:	294b883a 	add	r5,r5,r5
 63c:	10bfffc4 	addi	r2,r2,-1
 640:	18c7883a 	add	r3,r3,r3
 644:	293ffa36 	bltu	r5,r4,630 <__udivsi3+0x18>
 648:	18000826 	beq	r3,zero,66c <__udivsi3+0x54>
 64c:	0005883a 	mov	r2,zero
 650:	31400236 	bltu	r6,r5,65c <__udivsi3+0x44>
 654:	314dc83a 	sub	r6,r6,r5
 658:	10c4b03a 	or	r2,r2,r3
 65c:	1806d07a 	srli	r3,r3,1
 660:	280ad07a 	srli	r5,r5,1
 664:	183ffa1e 	bne	r3,zero,650 <__udivsi3+0x38>
 668:	f800283a 	ret
 66c:	0005883a 	mov	r2,zero
 670:	f800283a 	ret
 674:	00c00044 	movi	r3,1
 678:	003ff406 	br	64c <__udivsi3+0x34>

0000067c <__umodsi3>:
 67c:	2005883a 	mov	r2,r4
 680:	2900132e 	bgeu	r5,r4,6d0 <__umodsi3+0x54>
 684:	28001216 	blt	r5,zero,6d0 <__umodsi3+0x54>
 688:	01800804 	movi	r6,32
 68c:	00c00044 	movi	r3,1
 690:	00000206 	br	69c <__umodsi3+0x20>
 694:	30000c26 	beq	r6,zero,6c8 <__umodsi3+0x4c>
 698:	28000416 	blt	r5,zero,6ac <__umodsi3+0x30>
 69c:	294b883a 	add	r5,r5,r5
 6a0:	31bfffc4 	addi	r6,r6,-1
 6a4:	18c7883a 	add	r3,r3,r3
 6a8:	293ffa36 	bltu	r5,r4,694 <__umodsi3+0x18>
 6ac:	18000626 	beq	r3,zero,6c8 <__umodsi3+0x4c>
 6b0:	1806d07a 	srli	r3,r3,1
 6b4:	11400136 	bltu	r2,r5,6bc <__umodsi3+0x40>
 6b8:	1145c83a 	sub	r2,r2,r5
 6bc:	280ad07a 	srli	r5,r5,1
 6c0:	183ffb1e 	bne	r3,zero,6b0 <__umodsi3+0x34>
 6c4:	f800283a 	ret
 6c8:	2005883a 	mov	r2,r4
 6cc:	f800283a 	ret
 6d0:	00c00044 	movi	r3,1
 6d4:	003ff606 	br	6b0 <__umodsi3+0x34>

000006d8 <__mulsi3>:
 6d8:	0005883a 	mov	r2,zero
 6dc:	20000726 	beq	r4,zero,6fc <__mulsi3+0x24>
 6e0:	20c0004c 	andi	r3,r4,1
 6e4:	2008d07a 	srli	r4,r4,1
 6e8:	18000126 	beq	r3,zero,6f0 <__mulsi3+0x18>
 6ec:	1145883a 	add	r2,r2,r5
 6f0:	294b883a 	add	r5,r5,r5
 6f4:	203ffa1e 	bne	r4,zero,6e0 <__mulsi3+0x8>
 6f8:	f800283a 	ret
 6fc:	f800283a 	ret

00000700 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 700:	000078c1 	jmpi	78c <alt_iic_isr_register>

00000704 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 704:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 708:	00bfff84 	movi	r2,-2
 70c:	1884703a 	and	r2,r3,r2
 710:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 714:	00800044 	movi	r2,1
 718:	d1200617 	ldw	r4,-32744(gp)
 71c:	114a983a 	sll	r5,r2,r5
 720:	290ab03a 	or	r5,r5,r4
 724:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 728:	d0a00617 	ldw	r2,-32744(gp)
 72c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 730:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 734:	0005883a 	mov	r2,zero
 738:	f800283a 	ret

0000073c <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 73c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 740:	00bfff84 	movi	r2,-2
 744:	1884703a 	and	r2,r3,r2
 748:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 74c:	00bfff84 	movi	r2,-2
 750:	d1200617 	ldw	r4,-32744(gp)
 754:	114a183a 	rol	r5,r2,r5
 758:	290a703a 	and	r5,r5,r4
 75c:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 760:	d0a00617 	ldw	r2,-32744(gp)
 764:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 768:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 76c:	0005883a 	mov	r2,zero
 770:	f800283a 	ret

00000774 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 774:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 778:	00800044 	movi	r2,1
 77c:	1144983a 	sll	r2,r2,r5
 780:	10c4703a 	and	r2,r2,r3
}
 784:	1004c03a 	cmpne	r2,r2,zero
 788:	f800283a 	ret

0000078c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 78c:	28800808 	cmpgei	r2,r5,32
 790:	1000161e 	bne	r2,zero,7ec <alt_iic_isr_register+0x60>
{
 794:	defffe04 	addi	sp,sp,-8
 798:	dfc00115 	stw	ra,4(sp)
 79c:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 7a0:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 7a4:	00bfff84 	movi	r2,-2
 7a8:	8084703a 	and	r2,r16,r2
 7ac:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 7b0:	280690fa 	slli	r3,r5,3
 7b4:	008000b4 	movhi	r2,2
 7b8:	10800b04 	addi	r2,r2,44
 7bc:	10c5883a 	add	r2,r2,r3
 7c0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 7c4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 7c8:	30000626 	beq	r6,zero,7e4 <alt_iic_isr_register+0x58>
 7cc:	00007040 	call	704 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 7d0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 7d4:	dfc00117 	ldw	ra,4(sp)
 7d8:	dc000017 	ldw	r16,0(sp)
 7dc:	dec00204 	addi	sp,sp,8
 7e0:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 7e4:	000073c0 	call	73c <alt_ic_irq_disable>
 7e8:	003ff906 	br	7d0 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 7ec:	00bffa84 	movi	r2,-22
}
 7f0:	f800283a 	ret

000007f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 7f4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 7f8:	010000b4 	movhi	r4,2
 7fc:	01400034 	movhi	r5,0
 800:	dfc00015 	stw	ra,0(sp)
 804:	21000004 	addi	r4,r4,0
 808:	29424904 	addi	r5,r5,2340
 80c:	21400426 	beq	r4,r5,820 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 810:	018000b4 	movhi	r6,2
 814:	31800104 	addi	r6,r6,4
 818:	310dc83a 	sub	r6,r6,r4
 81c:	00008fc0 	call	8fc <memcpy>
  if (to != from)
 820:	01000034 	movhi	r4,0
 824:	01400034 	movhi	r5,0
 828:	21000804 	addi	r4,r4,32
 82c:	29400804 	addi	r5,r5,32
 830:	21400426 	beq	r4,r5,844 <alt_load+0x50>
      *to++ = *from++;
 834:	01800034 	movhi	r6,0
 838:	31806004 	addi	r6,r6,384
 83c:	310dc83a 	sub	r6,r6,r4
 840:	00008fc0 	call	8fc <memcpy>
  if (to != from)
 844:	010000b4 	movhi	r4,2
 848:	01400034 	movhi	r5,0
 84c:	21000004 	addi	r4,r4,0
 850:	29424904 	addi	r5,r5,2340
 854:	21400426 	beq	r4,r5,868 <alt_load+0x74>
      *to++ = *from++;
 858:	018000b4 	movhi	r6,2
 85c:	31800004 	addi	r6,r6,0
 860:	310dc83a 	sub	r6,r6,r4
 864:	00008fc0 	call	8fc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 868:	00008c80 	call	8c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 86c:	dfc00017 	ldw	ra,0(sp)
 870:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 874:	00008cc1 	jmpi	8cc <alt_icache_flush_all>

00000878 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 878:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 87c:	0009883a 	mov	r4,zero
{
 880:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 884:	00008a40 	call	8a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 888:	00008c40 	call	8c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 88c:	d1a00717 	ldw	r6,-32740(gp)
 890:	d1600817 	ldw	r5,-32736(gp)
 894:	d1200917 	ldw	r4,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 898:	dfc00017 	ldw	ra,0(sp)
 89c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 8a0:	00004c41 	jmpi	4c4 <main>

000008a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8a4:	deffff04 	addi	sp,sp,-4
 8a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 8ac:	00008f40 	call	8f4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8b0:	00800044 	movi	r2,1
 8b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8b8:	dfc00017 	ldw	ra,0(sp)
 8bc:	dec00104 	addi	sp,sp,4
 8c0:	f800283a 	ret

000008c4 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 8c4:	f800283a 	ret

000008c8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8c8:	f800283a 	ret

000008cc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8cc:	f800283a 	ret

000008d0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 8d0:	213ffe84 	addi	r4,r4,-6
 8d4:	20800428 	cmpgeui	r2,r4,16
 8d8:	1000041e 	bne	r2,zero,8ec <alt_exception_cause_generated_bad_addr+0x1c>
 8dc:	00a2c8d4 	movui	r2,35619
 8e0:	1104d83a 	srl	r2,r2,r4
 8e4:	1080004c 	andi	r2,r2,1
 8e8:	f800283a 	ret
 8ec:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
 8f0:	f800283a 	ret

000008f4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8f4:	000170fa 	wrctl	ienable,zero
}
 8f8:	f800283a 	ret

000008fc <memcpy>:
 8fc:	2005883a 	mov	r2,r4
 900:	0007883a 	mov	r3,zero
 904:	30c0011e 	bne	r6,r3,90c <memcpy+0x10>
 908:	f800283a 	ret
 90c:	28cf883a 	add	r7,r5,r3
 910:	39c00003 	ldbu	r7,0(r7)
 914:	10c9883a 	add	r4,r2,r3
 918:	18c00044 	addi	r3,r3,1
 91c:	21c00005 	stb	r7,0(r4)
 920:	003ff806 	br	904 <memcpy+0x8>
