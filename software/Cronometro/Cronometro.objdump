
Cronometro.elf:     file format elf32-littlenios2
Cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000930 memsz 0x00000930 flags r-x
    LOAD off    0x00002000 vaddr 0x00020000 paddr 0x00000950 align 2**12
         filesz 0x00000004 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000007d0  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00020000  00000954  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00020000  00000950  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00020004  00000954  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  00000954  00000954  00002004  2**0
                  CONTENTS
  7 .ram_0        00000000  00020128  00020128  00002004  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000270  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000019da  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000e10  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00000f52  00000000  00000000  00004a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000002e8  00000000  00000000  000059e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000a4c  00000000  00000000  00005ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00006728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000008f8  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000e6  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000673  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0000898e  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  00008991  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00008996  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00008997  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00008998  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000899c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000089a0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  000089a4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  000089ae  2**0
                  CONTENTS, READONLY
 29 .jdi          000001f6  00000000  00000000  000089e7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000724e9  00000000  00000000  00008bdd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
00020000 l    d  .rwdata	00000000 .rwdata
00020004 l    d  .bss	00000000 .bss
00000954 l    d  .rom_0	00000000 .rom_0
00020128 l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Cronometro.c
000001bc l     F .text	000000a8 display_nums
00000264 l     F .text	00000070 display_seconds
000002d4 l     F .text	000000a4 begin
00020004 l     O .bss	00000004 mode
00000378 l     F .text	00000178 timer_isr
00020010 l     O .bss	00000004 ms
0002000c l     O .bss	00000004 sec
00020008 l     O .bss	00000004 min
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00020024 g     O .bss	00000004 alt_instruction_exception_handler
000008a4 g     F .text	0000002c alt_main
00020028 g     O .bss	00000100 alt_irq
00000950 g       *ABS*	00000000 __flash_rwdata_start
00000920 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002001c g     O .bss	00000004 alt_argv
00028000 g       *ABS*	00000000 _gp
00000928 g     F .text	00000028 memcpy
000008fc g     F .text	00000024 alt_exception_cause_generated_bad_addr
00000644 g     F .text	00000064 .hidden __udivsi3
00020128 g       *ABS*	00000000 __bss_end
000007b8 g     F .text	00000068 alt_iic_isr_register
00020000 g       *ABS*	00000000 __alt_mem_ram_0
000007a0 g     F .text	00000018 alt_ic_irq_enabled
00020014 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
000008f4 g     F .text	00000004 alt_dcache_flush_all
00020004 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __ram_rodata_end
000006a8 g     F .text	0000005c .hidden __umodsi3
00020128 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00022000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
000008f0 g     F .text	00000004 alt_sys_init
00000704 g     F .text	00000028 .hidden __mulsi3
00020000 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00020128 g       *ABS*	00000000 __alt_stack_base
00020004 g       *ABS*	00000000 __bss_start
000004f0 g     F .text	00000060 main
00020018 g     O .bss	00000004 alt_envp
00000550 g     F .text	00000080 .hidden __divsi3
00000950 g       *ABS*	00000000 __flash_rodata_start
000008d0 g     F .text	00000020 alt_irq_init
00020020 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000072c g     F .text	00000004 alt_ic_isr_register
00020004 g       *ABS*	00000000 _edata
00020128 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000768 g     F .text	00000038 alt_ic_irq_disable
000005d0 g     F .text	00000074 .hidden __modsi3
00022000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
0000000c g       .entry	00000000 _exit
000008f8 g     F .text	00000004 alt_icache_flush_all
00020000 g     O .rwdata	00000004 alt_priority_mask
00000730 g     F .text	00000038 alt_ic_irq_enable
00000820 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	040000b4 	movhi	r16,2
 110:	84000a04 	addi	r16,r16,40
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00917 	ldw	r2,-32732(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
 188:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
 19c:	18c04a14 	ori	r3,r3,296

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	00008200 	call	820 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00008a40 	call	8a4 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <display_nums>:
static int min = 0;
static int mode = 0;

static unsigned display_nums(unsigned curr_num){

	switch (curr_num)
 1bc:	20800920 	cmpeqi	r2,r4,36
 1c0:	10001c1e 	bne	r2,zero,234 <display_nums+0x78>
 1c4:	20800968 	cmpgeui	r2,r4,37
 1c8:	10000d1e 	bne	r2,zero,200 <display_nums+0x44>
 1cc:	208004a0 	cmpeqi	r2,r4,18
 1d0:	10001a1e 	bne	r2,zero,23c <display_nums+0x80>
 1d4:	208004e8 	cmpgeui	r2,r4,19
 1d8:	1000051e 	bne	r2,zero,1f0 <display_nums+0x34>
 1dc:	20001926 	beq	r4,zero,244 <display_nums+0x88>
 1e0:	210000a0 	cmpeqi	r4,r4,2
	         case DISP_5:
	         return DISP_6;
	         break;

	         case DISP_6:
	         return DISP_7;
 1e4:	00801e04 	movi	r2,120
	switch (curr_num)
 1e8:	20000326 	beq	r4,zero,1f8 <display_nums+0x3c>
	         break;

	         default:
	         return DISP_0;
	      }
}
 1ec:	f800283a 	ret
	switch (curr_num)
 1f0:	21000660 	cmpeqi	r4,r4,25
 1f4:	2000151e 	bne	r4,zero,24c <display_nums+0x90>
	         return DISP_0;
 1f8:	00801004 	movi	r2,64
 1fc:	f800283a 	ret
	switch (curr_num)
 200:	20801e20 	cmpeqi	r2,r4,120
 204:	1000131e 	bne	r2,zero,254 <display_nums+0x98>
 208:	20801e68 	cmpgeui	r2,r4,121
 20c:	1000051e 	bne	r2,zero,224 <display_nums+0x68>
 210:	20800c20 	cmpeqi	r2,r4,48
 214:	1000111e 	bne	r2,zero,25c <display_nums+0xa0>
 218:	21001020 	cmpeqi	r4,r4,64
	         return DISP_1;
 21c:	00801e44 	movi	r2,121
 220:	003ff106 	br	1e8 <display_nums+0x2c>
	switch (curr_num)
 224:	21001e60 	cmpeqi	r4,r4,121
 228:	203ff326 	beq	r4,zero,1f8 <display_nums+0x3c>
 22c:	00800904 	movi	r2,36
 230:	003fee06 	br	1ec <display_nums+0x30>
	         return DISP_3;
 234:	00800c04 	movi	r2,48
 238:	f800283a 	ret
	         return DISP_6;
 23c:	00800084 	movi	r2,2
 240:	f800283a 	ret
	         return DISP_9;
 244:	00800404 	movi	r2,16
 248:	f800283a 	ret
	         return DISP_5;
 24c:	00800484 	movi	r2,18
 250:	f800283a 	ret
	         return DISP_8;
 254:	0005883a 	mov	r2,zero
 258:	f800283a 	ret
	         return DISP_4;
 25c:	00800644 	movi	r2,25
 260:	f800283a 	ret

00000264 <display_seconds>:

static unsigned display_seconds(unsigned curr_num){

	switch (curr_num)
 264:	20800c20 	cmpeqi	r2,r4,48
 268:	1000101e 	bne	r2,zero,2ac <display_seconds+0x48>
 26c:	20800c68 	cmpgeui	r2,r4,49
 270:	1000081e 	bne	r2,zero,294 <display_seconds+0x30>
 274:	20800660 	cmpeqi	r2,r4,25
 278:	10000e1e 	bne	r2,zero,2b4 <display_seconds+0x50>
 27c:	20800920 	cmpeqi	r2,r4,36
 280:	10000e1e 	bne	r2,zero,2bc <display_seconds+0x58>
 284:	210004a0 	cmpeqi	r4,r4,18
 288:	20000e1e 	bne	r4,zero,2c4 <display_seconds+0x60>
	         case DISP_5:
	         return DISP_6;
	         break;

	         default:
	         return DISP_0;
 28c:	00801004 	movi	r2,64
 290:	f800283a 	ret
	switch (curr_num)
 294:	20801020 	cmpeqi	r2,r4,64
 298:	10000c1e 	bne	r2,zero,2cc <display_seconds+0x68>
 29c:	21001e60 	cmpeqi	r4,r4,121
 2a0:	00800904 	movi	r2,36
 2a4:	203ff926 	beq	r4,zero,28c <display_seconds+0x28>
	      }
}
 2a8:	f800283a 	ret
	         return DISP_4;
 2ac:	00800644 	movi	r2,25
 2b0:	f800283a 	ret
	         return DISP_5;
 2b4:	00800484 	movi	r2,18
 2b8:	f800283a 	ret
	         return DISP_3;
 2bc:	00800c04 	movi	r2,48
 2c0:	f800283a 	ret
	         return DISP_6;
 2c4:	00800084 	movi	r2,2
 2c8:	f800283a 	ret
	         return DISP_1;
 2cc:	00801e44 	movi	r2,121
 2d0:	003ff506 	br	2a8 <display_seconds+0x44>

000002d4 <begin>:
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
}

static void begin(){

	IOWR(DISP_0_BASE,0,DISP_0);
 2d4:	00801004 	movi	r2,64
 2d8:	00c00134 	movhi	r3,4
 2dc:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_1_BASE,0,DISP_0);
 2e0:	00c00174 	movhi	r3,5
 2e4:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_2_BASE,0,DISP_0);
 2e8:	00c00474 	movhi	r3,17
 2ec:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_3_BASE,0,DISP_0);
 2f0:	00c001b4 	movhi	r3,6
 2f4:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_4_BASE,0,DISP_0);
 2f8:	00c001f4 	movhi	r3,7
 2fc:	18800035 	stwio	r2,0(r3)
	IOWR(DISP_5_BASE,0,DISP_0);
 300:	00c00234 	movhi	r3,8
 304:	18800035 	stwio	r2,0(r3)

	unsigned swi1 = IORD(SWITCH_MODE_0_BASE,0);
 308:	00800274 	movhi	r2,9
 30c:	10c00037 	ldwio	r3,0(r2)
	unsigned swi2 = IORD(SWITCH_MODE_1_BASE,0);
 310:	00800434 	movhi	r2,16
 314:	10800037 	ldwio	r2,0(r2)
	if (swi1 == 0 && swi2 == 0){
 318:	1800111e 	bne	r3,zero,360 <begin+0x8c>
 31c:	1000081e 	bne	r2,zero,340 <begin+0x6c>
		mode = 1;
 320:	00800044 	movi	r2,1
 324:	d0a00115 	stw	r2,-32764(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, 0b001);
 328:	00c004f4 	movhi	r3,19
 32c:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, 0b011);
	} else {
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, 0b111);
		mode = 3;
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0);
 330:	008004b4 	movhi	r2,18
 334:	10000335 	stwio	zero,12(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE);
 338:	10800337 	ldwio	r2,12(r2)
}
 33c:	f800283a 	ret
	} else if (swi1 == 0 && swi2 == 1){
 340:	10800058 	cmpnei	r2,r2,1
 344:	1000061e 	bne	r2,zero,360 <begin+0x8c>
		mode = 2;
 348:	00800084 	movi	r2,2
 34c:	d0a00115 	stw	r2,-32764(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, 0b011);
 350:	00c000c4 	movi	r3,3
 354:	008004f4 	movhi	r2,19
 358:	10c00035 	stwio	r3,0(r2)
 35c:	003ff406 	br	330 <begin+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, 0b111);
 360:	00c001c4 	movi	r3,7
 364:	008004f4 	movhi	r2,19
 368:	10c00035 	stwio	r3,0(r2)
		mode = 3;
 36c:	008000c4 	movi	r2,3
 370:	d0a00115 	stw	r2,-32764(gp)
 374:	003fee06 	br	330 <begin+0x5c>

00000378 <timer_isr>:
	unsigned pause = IORD(SWITCH_PAUSE_0_BASE,0);
 378:	00800c34 	movhi	r2,48
 37c:	10c00037 	ldwio	r3,0(r2)
	if (mode != 0 && pause == 0) {
 380:	d0a00117 	ldw	r2,-32764(gp)
 384:	10005726 	beq	r2,zero,4e4 <timer_isr+0x16c>
 388:	1800561e 	bne	r3,zero,4e4 <timer_isr+0x16c>
		ms++;
 38c:	d1200417 	ldw	r4,-32752(gp)
		if (mode == 1 || mode == 3) {
 390:	00ffff44 	movi	r3,-3
{
 394:	deffff04 	addi	sp,sp,-4
		ms++;
 398:	21000044 	addi	r4,r4,1
		if (mode == 1 || mode == 3) {
 39c:	10c4703a 	and	r2,r2,r3
{
 3a0:	dfc00015 	stw	ra,0(sp)
		ms++;
 3a4:	d1200415 	stw	r4,-32752(gp)
		if (mode == 1 || mode == 3) {
 3a8:	10800060 	cmpeqi	r2,r2,1
 3ac:	10001126 	beq	r2,zero,3f4 <timer_isr+0x7c>
			if (ms % 10 == 0) { // disp 0 de los milisegundos
 3b0:	01400284 	movi	r5,10
 3b4:	00005d00 	call	5d0 <__modsi3>
 3b8:	1000051e 	bne	r2,zero,3d0 <timer_isr+0x58>
				unsigned next = display_nums(current);
 3bc:	00800134 	movhi	r2,4
 3c0:	11000037 	ldwio	r4,0(r2)
 3c4:	00001bc0 	call	1bc <display_nums>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_0_BASE, next);
 3c8:	00c00134 	movhi	r3,4
 3cc:	18800035 	stwio	r2,0(r3)
 3d0:	d1200417 	ldw	r4,-32752(gp)
 3d4:	01401904 	movi	r5,100
 3d8:	00005d00 	call	5d0 <__modsi3>
			if (ms % 100 == 0) { // disp 1 de los milisegundos
 3dc:	1000051e 	bne	r2,zero,3f4 <timer_isr+0x7c>
				unsigned next = display_nums(current);
 3e0:	00800174 	movhi	r2,5
 3e4:	11000037 	ldwio	r4,0(r2)
 3e8:	00001bc0 	call	1bc <display_nums>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_1_BASE, next);
 3ec:	00c00174 	movhi	r3,5
 3f0:	18800035 	stwio	r2,0(r3)
		if (ms == 999) {
 3f4:	d0a00417 	ldw	r2,-32752(gp)
 3f8:	1080f9d8 	cmpnei	r2,r2,999
 3fc:	1000041e 	bne	r2,zero,410 <timer_isr+0x98>
			sec++;
 400:	d0a00317 	ldw	r2,-32756(gp)
			ms = 0;
 404:	d0200415 	stw	zero,-32752(gp)
			sec++;
 408:	10800044 	addi	r2,r2,1
 40c:	d0a00315 	stw	r2,-32756(gp)
		if (mode == 2 || mode == 3) {
 410:	d0a00117 	ldw	r2,-32764(gp)
			if (sec != 0) {
 414:	d0e00317 	ldw	r3,-32756(gp)
		if (mode == 2 || mode == 3) {
 418:	10bfff84 	addi	r2,r2,-2
 41c:	108000b0 	cmpltui	r2,r2,2
 420:	10001026 	beq	r2,zero,464 <timer_isr+0xec>
			if (sec != 0) {
 424:	18000526 	beq	r3,zero,43c <timer_isr+0xc4>
				unsigned next = display_nums(current);
 428:	00800474 	movhi	r2,17
 42c:	11000037 	ldwio	r4,0(r2)
 430:	00001bc0 	call	1bc <display_nums>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_2_BASE, next);
 434:	00c00474 	movhi	r3,17
 438:	18800035 	stwio	r2,0(r3)
			if (sec != 0 && sec % 10 == 0) {
 43c:	d1200317 	ldw	r4,-32756(gp)
 440:	20000f26 	beq	r4,zero,480 <timer_isr+0x108>
 444:	01400284 	movi	r5,10
 448:	00005d00 	call	5d0 <__modsi3>
 44c:	1000051e 	bne	r2,zero,464 <timer_isr+0xec>
				unsigned next = display_seconds(current);
 450:	008001b4 	movhi	r2,6
 454:	11000037 	ldwio	r4,0(r2)
 458:	00002640 	call	264 <display_seconds>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_3_BASE, next);
 45c:	00c001b4 	movhi	r3,6
 460:	18800035 	stwio	r2,0(r3)
		if (sec == 59) {
 464:	d0a00317 	ldw	r2,-32756(gp)
 468:	10800ed8 	cmpnei	r2,r2,59
 46c:	1000041e 	bne	r2,zero,480 <timer_isr+0x108>
			min++;
 470:	d0a00217 	ldw	r2,-32760(gp)
			sec = 0;
 474:	d0200315 	stw	zero,-32756(gp)
			min++;
 478:	10800044 	addi	r2,r2,1
 47c:	d0a00215 	stw	r2,-32760(gp)
		if (mode == 3) {
 480:	d0a00117 	ldw	r2,-32764(gp)
 484:	108000d8 	cmpnei	r2,r2,3
 488:	1000111e 	bne	r2,zero,4d0 <timer_isr+0x158>
			if (min != 0) {
 48c:	d0a00217 	ldw	r2,-32760(gp)
 490:	10000526 	beq	r2,zero,4a8 <timer_isr+0x130>
				unsigned next = display_seconds(current);
 494:	008001f4 	movhi	r2,7
 498:	11000037 	ldwio	r4,0(r2)
 49c:	00002640 	call	264 <display_seconds>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_4_BASE, next);
 4a0:	00c001f4 	movhi	r3,7
 4a4:	18800035 	stwio	r2,0(r3)
			if (min != 0 && min % 10 == 0) {
 4a8:	d1200217 	ldw	r4,-32760(gp)
 4ac:	20000826 	beq	r4,zero,4d0 <timer_isr+0x158>
 4b0:	01400284 	movi	r5,10
 4b4:	00005d00 	call	5d0 <__modsi3>
 4b8:	1000051e 	bne	r2,zero,4d0 <timer_isr+0x158>
				unsigned next = display_seconds(current);
 4bc:	00800234 	movhi	r2,8
 4c0:	11000037 	ldwio	r4,0(r2)
 4c4:	00002640 	call	264 <display_seconds>
				IOWR_ALTERA_AVALON_PIO_DATA(DISP_5_BASE, next);
 4c8:	00c00234 	movhi	r3,8
 4cc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 4d0:	008000f4 	movhi	r2,3
 4d4:	10000035 	stwio	zero,0(r2)
}
 4d8:	dfc00017 	ldw	ra,0(sp)
 4dc:	dec00104 	addi	sp,sp,4
 4e0:	f800283a 	ret
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 4e4:	008000f4 	movhi	r2,3
 4e8:	10000035 	stwio	zero,0(r2)
 4ec:	f800283a 	ret

000004f0 <main>:

int main()
{
 4f0:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(
 4f4:	01800034 	movhi	r6,0
 4f8:	d8000015 	stw	zero,0(sp)
 4fc:	000f883a 	mov	r7,zero
 500:	3180de04 	addi	r6,r6,888
 504:	000b883a 	mov	r5,zero
 508:	0009883a 	mov	r4,zero
{
 50c:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 510:	000072c0 	call	72c <alt_ic_isr_register>
				timer_isr,
				NULL,
				NULL
		);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 514:	00c000c4 	movi	r3,3
 518:	008000f4 	movhi	r2,3
 51c:	10c00135 	stwio	r3,4(r2)
					TIMER_0_BASE,
					  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
					| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_BUTTON_0_BASE, 0xf);
 520:	00c003c4 	movi	r3,15
 524:	008004b4 	movhi	r2,18
 528:	10c00235 	stwio	r3,8(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_BUTTON_0_BASE, 0x0);
 52c:	10000335 	stwio	zero,12(r2)

	alt_ic_isr_register(
 530:	01800034 	movhi	r6,0
 534:	d8000015 	stw	zero,0(sp)
 538:	000f883a 	mov	r7,zero
 53c:	3180b504 	addi	r6,r6,724
 540:	01400044 	movi	r5,1
 544:	0009883a 	mov	r4,zero
 548:	000072c0 	call	72c <alt_ic_isr_register>
			START_BUTTON_0_IRQ_INTERRUPT_CONTROLLER_ID,
			START_BUTTON_0_IRQ,
			begin,
			NULL, NULL);

	while (1);
 54c:	003fff06 	br	54c <main+0x5c>

00000550 <__divsi3>:
 550:	20001a16 	blt	r4,zero,5bc <__divsi3+0x6c>
 554:	000f883a 	mov	r7,zero
 558:	2800020e 	bge	r5,zero,564 <__divsi3+0x14>
 55c:	014bc83a 	sub	r5,zero,r5
 560:	39c0005c 	xori	r7,r7,1
 564:	200d883a 	mov	r6,r4
 568:	00c00044 	movi	r3,1
 56c:	2900092e 	bgeu	r5,r4,594 <__divsi3+0x44>
 570:	00800804 	movi	r2,32
 574:	00c00044 	movi	r3,1
 578:	00000106 	br	580 <__divsi3+0x30>
 57c:	10001226 	beq	r2,zero,5c8 <__divsi3+0x78>
 580:	294b883a 	add	r5,r5,r5
 584:	10bfffc4 	addi	r2,r2,-1
 588:	18c7883a 	add	r3,r3,r3
 58c:	293ffb36 	bltu	r5,r4,57c <__divsi3+0x2c>
 590:	18000d26 	beq	r3,zero,5c8 <__divsi3+0x78>
 594:	0005883a 	mov	r2,zero
 598:	31400236 	bltu	r6,r5,5a4 <__divsi3+0x54>
 59c:	314dc83a 	sub	r6,r6,r5
 5a0:	10c4b03a 	or	r2,r2,r3
 5a4:	1806d07a 	srli	r3,r3,1
 5a8:	280ad07a 	srli	r5,r5,1
 5ac:	183ffa1e 	bne	r3,zero,598 <__divsi3+0x48>
 5b0:	38000126 	beq	r7,zero,5b8 <__divsi3+0x68>
 5b4:	0085c83a 	sub	r2,zero,r2
 5b8:	f800283a 	ret
 5bc:	0109c83a 	sub	r4,zero,r4
 5c0:	01c00044 	movi	r7,1
 5c4:	003fe406 	br	558 <__divsi3+0x8>
 5c8:	0005883a 	mov	r2,zero
 5cc:	003ff806 	br	5b0 <__divsi3+0x60>

000005d0 <__modsi3>:
 5d0:	20001716 	blt	r4,zero,630 <__modsi3+0x60>
 5d4:	000f883a 	mov	r7,zero
 5d8:	2005883a 	mov	r2,r4
 5dc:	2800010e 	bge	r5,zero,5e4 <__modsi3+0x14>
 5e0:	014bc83a 	sub	r5,zero,r5
 5e4:	00c00044 	movi	r3,1
 5e8:	2900092e 	bgeu	r5,r4,610 <__modsi3+0x40>
 5ec:	01800804 	movi	r6,32
 5f0:	00c00044 	movi	r3,1
 5f4:	00000106 	br	5fc <__modsi3+0x2c>
 5f8:	30001026 	beq	r6,zero,63c <__modsi3+0x6c>
 5fc:	294b883a 	add	r5,r5,r5
 600:	31bfffc4 	addi	r6,r6,-1
 604:	18c7883a 	add	r3,r3,r3
 608:	293ffb36 	bltu	r5,r4,5f8 <__modsi3+0x28>
 60c:	18000b26 	beq	r3,zero,63c <__modsi3+0x6c>
 610:	1806d07a 	srli	r3,r3,1
 614:	11400136 	bltu	r2,r5,61c <__modsi3+0x4c>
 618:	1145c83a 	sub	r2,r2,r5
 61c:	280ad07a 	srli	r5,r5,1
 620:	183ffb1e 	bne	r3,zero,610 <__modsi3+0x40>
 624:	38000126 	beq	r7,zero,62c <__modsi3+0x5c>
 628:	0085c83a 	sub	r2,zero,r2
 62c:	f800283a 	ret
 630:	0109c83a 	sub	r4,zero,r4
 634:	01c00044 	movi	r7,1
 638:	003fe706 	br	5d8 <__modsi3+0x8>
 63c:	2005883a 	mov	r2,r4
 640:	003ff806 	br	624 <__modsi3+0x54>

00000644 <__udivsi3>:
 644:	200d883a 	mov	r6,r4
 648:	2900152e 	bgeu	r5,r4,6a0 <__udivsi3+0x5c>
 64c:	28001416 	blt	r5,zero,6a0 <__udivsi3+0x5c>
 650:	00800804 	movi	r2,32
 654:	00c00044 	movi	r3,1
 658:	00000206 	br	664 <__udivsi3+0x20>
 65c:	10000e26 	beq	r2,zero,698 <__udivsi3+0x54>
 660:	28000416 	blt	r5,zero,674 <__udivsi3+0x30>
 664:	294b883a 	add	r5,r5,r5
 668:	10bfffc4 	addi	r2,r2,-1
 66c:	18c7883a 	add	r3,r3,r3
 670:	293ffa36 	bltu	r5,r4,65c <__udivsi3+0x18>
 674:	18000826 	beq	r3,zero,698 <__udivsi3+0x54>
 678:	0005883a 	mov	r2,zero
 67c:	31400236 	bltu	r6,r5,688 <__udivsi3+0x44>
 680:	314dc83a 	sub	r6,r6,r5
 684:	10c4b03a 	or	r2,r2,r3
 688:	1806d07a 	srli	r3,r3,1
 68c:	280ad07a 	srli	r5,r5,1
 690:	183ffa1e 	bne	r3,zero,67c <__udivsi3+0x38>
 694:	f800283a 	ret
 698:	0005883a 	mov	r2,zero
 69c:	f800283a 	ret
 6a0:	00c00044 	movi	r3,1
 6a4:	003ff406 	br	678 <__udivsi3+0x34>

000006a8 <__umodsi3>:
 6a8:	2005883a 	mov	r2,r4
 6ac:	2900132e 	bgeu	r5,r4,6fc <__umodsi3+0x54>
 6b0:	28001216 	blt	r5,zero,6fc <__umodsi3+0x54>
 6b4:	01800804 	movi	r6,32
 6b8:	00c00044 	movi	r3,1
 6bc:	00000206 	br	6c8 <__umodsi3+0x20>
 6c0:	30000c26 	beq	r6,zero,6f4 <__umodsi3+0x4c>
 6c4:	28000416 	blt	r5,zero,6d8 <__umodsi3+0x30>
 6c8:	294b883a 	add	r5,r5,r5
 6cc:	31bfffc4 	addi	r6,r6,-1
 6d0:	18c7883a 	add	r3,r3,r3
 6d4:	293ffa36 	bltu	r5,r4,6c0 <__umodsi3+0x18>
 6d8:	18000626 	beq	r3,zero,6f4 <__umodsi3+0x4c>
 6dc:	1806d07a 	srli	r3,r3,1
 6e0:	11400136 	bltu	r2,r5,6e8 <__umodsi3+0x40>
 6e4:	1145c83a 	sub	r2,r2,r5
 6e8:	280ad07a 	srli	r5,r5,1
 6ec:	183ffb1e 	bne	r3,zero,6dc <__umodsi3+0x34>
 6f0:	f800283a 	ret
 6f4:	2005883a 	mov	r2,r4
 6f8:	f800283a 	ret
 6fc:	00c00044 	movi	r3,1
 700:	003ff606 	br	6dc <__umodsi3+0x34>

00000704 <__mulsi3>:
 704:	0005883a 	mov	r2,zero
 708:	20000726 	beq	r4,zero,728 <__mulsi3+0x24>
 70c:	20c0004c 	andi	r3,r4,1
 710:	2008d07a 	srli	r4,r4,1
 714:	18000126 	beq	r3,zero,71c <__mulsi3+0x18>
 718:	1145883a 	add	r2,r2,r5
 71c:	294b883a 	add	r5,r5,r5
 720:	203ffa1e 	bne	r4,zero,70c <__mulsi3+0x8>
 724:	f800283a 	ret
 728:	f800283a 	ret

0000072c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 72c:	00007b81 	jmpi	7b8 <alt_iic_isr_register>

00000730 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 730:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 734:	00bfff84 	movi	r2,-2
 738:	1884703a 	and	r2,r3,r2
 73c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 740:	00800044 	movi	r2,1
 744:	d1200517 	ldw	r4,-32748(gp)
 748:	114a983a 	sll	r5,r2,r5
 74c:	290ab03a 	or	r5,r5,r4
 750:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 754:	d0a00517 	ldw	r2,-32748(gp)
 758:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 75c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 760:	0005883a 	mov	r2,zero
 764:	f800283a 	ret

00000768 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 768:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 76c:	00bfff84 	movi	r2,-2
 770:	1884703a 	and	r2,r3,r2
 774:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 778:	00bfff84 	movi	r2,-2
 77c:	d1200517 	ldw	r4,-32748(gp)
 780:	114a183a 	rol	r5,r2,r5
 784:	290a703a 	and	r5,r5,r4
 788:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 78c:	d0a00517 	ldw	r2,-32748(gp)
 790:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 794:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 798:	0005883a 	mov	r2,zero
 79c:	f800283a 	ret

000007a0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 7a0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 7a4:	00800044 	movi	r2,1
 7a8:	1144983a 	sll	r2,r2,r5
 7ac:	10c4703a 	and	r2,r2,r3
}
 7b0:	1004c03a 	cmpne	r2,r2,zero
 7b4:	f800283a 	ret

000007b8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 7b8:	28800808 	cmpgei	r2,r5,32
 7bc:	1000161e 	bne	r2,zero,818 <alt_iic_isr_register+0x60>
{
 7c0:	defffe04 	addi	sp,sp,-8
 7c4:	dfc00115 	stw	ra,4(sp)
 7c8:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 7cc:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 7d0:	00bfff84 	movi	r2,-2
 7d4:	8084703a 	and	r2,r16,r2
 7d8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 7dc:	280690fa 	slli	r3,r5,3
 7e0:	008000b4 	movhi	r2,2
 7e4:	10800a04 	addi	r2,r2,40
 7e8:	10c5883a 	add	r2,r2,r3
 7ec:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 7f0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 7f4:	30000626 	beq	r6,zero,810 <alt_iic_isr_register+0x58>
 7f8:	00007300 	call	730 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 7fc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 800:	dfc00117 	ldw	ra,4(sp)
 804:	dc000017 	ldw	r16,0(sp)
 808:	dec00204 	addi	sp,sp,8
 80c:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 810:	00007680 	call	768 <alt_ic_irq_disable>
 814:	003ff906 	br	7fc <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 818:	00bffa84 	movi	r2,-22
}
 81c:	f800283a 	ret

00000820 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 820:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 824:	010000b4 	movhi	r4,2
 828:	01400034 	movhi	r5,0
 82c:	dfc00015 	stw	ra,0(sp)
 830:	21000004 	addi	r4,r4,0
 834:	29425404 	addi	r5,r5,2384
 838:	21400426 	beq	r4,r5,84c <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 83c:	018000b4 	movhi	r6,2
 840:	31800104 	addi	r6,r6,4
 844:	310dc83a 	sub	r6,r6,r4
 848:	00009280 	call	928 <memcpy>
  if (to != from)
 84c:	01000034 	movhi	r4,0
 850:	01400034 	movhi	r5,0
 854:	21000804 	addi	r4,r4,32
 858:	29400804 	addi	r5,r5,32
 85c:	21400426 	beq	r4,r5,870 <alt_load+0x50>
      *to++ = *from++;
 860:	01800034 	movhi	r6,0
 864:	31806004 	addi	r6,r6,384
 868:	310dc83a 	sub	r6,r6,r4
 86c:	00009280 	call	928 <memcpy>
  if (to != from)
 870:	010000b4 	movhi	r4,2
 874:	01400034 	movhi	r5,0
 878:	21000004 	addi	r4,r4,0
 87c:	29425404 	addi	r5,r5,2384
 880:	21400426 	beq	r4,r5,894 <alt_load+0x74>
      *to++ = *from++;
 884:	018000b4 	movhi	r6,2
 888:	31800004 	addi	r6,r6,0
 88c:	310dc83a 	sub	r6,r6,r4
 890:	00009280 	call	928 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 894:	00008f40 	call	8f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 898:	dfc00017 	ldw	ra,0(sp)
 89c:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 8a0:	00008f81 	jmpi	8f8 <alt_icache_flush_all>

000008a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8a8:	0009883a 	mov	r4,zero
{
 8ac:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 8b0:	00008d00 	call	8d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8b4:	00008f00 	call	8f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8b8:	d1a00617 	ldw	r6,-32744(gp)
 8bc:	d1600717 	ldw	r5,-32740(gp)
 8c0:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8c4:	dfc00017 	ldw	ra,0(sp)
 8c8:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 8cc:	00004f01 	jmpi	4f0 <main>

000008d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8d0:	deffff04 	addi	sp,sp,-4
 8d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 8d8:	00009200 	call	920 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8dc:	00800044 	movi	r2,1
 8e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8e4:	dfc00017 	ldw	ra,0(sp)
 8e8:	dec00104 	addi	sp,sp,4
 8ec:	f800283a 	ret

000008f0 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 8f0:	f800283a 	ret

000008f4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8f4:	f800283a 	ret

000008f8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8f8:	f800283a 	ret

000008fc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 8fc:	213ffe84 	addi	r4,r4,-6
 900:	20800428 	cmpgeui	r2,r4,16
 904:	1000041e 	bne	r2,zero,918 <alt_exception_cause_generated_bad_addr+0x1c>
 908:	00a2c8d4 	movui	r2,35619
 90c:	1104d83a 	srl	r2,r2,r4
 910:	1080004c 	andi	r2,r2,1
 914:	f800283a 	ret
 918:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
 91c:	f800283a 	ret

00000920 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 920:	000170fa 	wrctl	ienable,zero
}
 924:	f800283a 	ret

00000928 <memcpy>:
 928:	2005883a 	mov	r2,r4
 92c:	0007883a 	mov	r3,zero
 930:	30c0011e 	bne	r6,r3,938 <memcpy+0x10>
 934:	f800283a 	ret
 938:	28cf883a 	add	r7,r5,r3
 93c:	39c00003 	ldbu	r7,0(r7)
 940:	10c9883a 	add	r4,r2,r3
 944:	18c00044 	addi	r3,r3,1
 948:	21c00005 	stb	r7,0(r4)
 94c:	003ff806 	br	930 <memcpy+0x8>
